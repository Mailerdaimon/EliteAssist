name: Rust

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Test
        run: cargo test --verbose

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment: beta
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Configure Version
        id: get_version
        run: |
          VERSION=$(grep '^version = ' Cargo.toml | cut -d '"' -f2)
          MAJOR=$(echo $VERSION | cut -d. -f1)
          MINOR=$(echo $VERSION | cut -d. -f2)
          NEW_VERSION="$MAJOR.$MINOR.${{ github.run_number }}"
          echo "VERSION=$NEW_VERSION" >> $GITHUB_ENV
          sed -i "s/^version = \".*\"/version = \"$NEW_VERSION\"/" Cargo.toml

      - name: Setup Docker
        uses: docker/setup-buildx-action@v3

      - name: Build Docker
        run: |
          docker build -t eliteassist-builder .
          # Extract the built artifacts from the container
          docker create --name temp-container eliteassist-builder
          mkdir -p ./artifacts
          docker cp temp-container:/app/target/release ./artifacts
          docker rm temp-container

      - name: Deploy
        uses: softprops/action-gh-release@v2
        with:
          files: ./artifacts/release/EliteAssist
          prerelease: true
          generate_release_notes: true
          tag_name: v${{ env.VERSION }}