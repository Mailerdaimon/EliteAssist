name: Build

on:
  push:
    branches: [ "main" ]
    paths-ignore:
      - 'README.md'
      - 'LICENSE.md'
      - 'docs/**'
  pull_request:
    branches: [ "main" ]
    paths-ignore:
      - 'README.md'
      - 'LICENSE.md'
      - 'docs/**'

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          submodules: recursive

      - name: Test
        run: cargo test --verbose

  version:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.compute.outputs.VERSION }}
    steps:
      - uses: actions/checkout@v5
        with:
          submodules: recursive
      - name: Compute Version
        id: compute
        run: |
          VERSION=$(grep '^version = ' Cargo.toml | cut -d '"' -f2)
          MAJOR=$(echo $VERSION | cut -d. -f1)
          MINOR=$(echo $VERSION | cut -d. -f2)
          NEW_VERSION="$MAJOR.$MINOR.${{ github.run_number }}"
          echo "VERSION=$NEW_VERSION" >> $GITHUB_OUTPUT

  build-linux:
    if: github.event_name == 'push'
    needs:
      - test
      - version
    runs-on: ubuntu-latest
    env:
      VERSION: ${{ needs.version.outputs.version }}
    steps:
      - uses: actions/checkout@v5
        with:
          submodules: recursive

      - name: Apply Version to Cargo.toml
        run: |
          sed -i "s/^version = \".*\"/version = \"${VERSION}\"/" Cargo.toml

      - name: Setup Docker
        uses: docker/setup-buildx-action@v3

      - name: Build Docker
        run: |
          docker build -t eliteassist-builder .
          # Extract the built artifacts from the container
          docker create --name temp-container eliteassist-builder
          mkdir -p ./artifacts
          docker cp temp-container:/app/target/release ./artifacts
          docker rm temp-container

      - name: Upload Linux artifact
        uses: actions/upload-artifact@v4
        with:
          name: EliteAssist-linux
          path: ./artifacts/release/EliteAssist

  build-windows:
    if: github.event_name == 'push'
    needs:
      - test
      - version
    runs-on: ubuntu-latest
    env:
      VERSION: ${{ needs.version.outputs.version }}
    steps:
      - uses: actions/checkout@v5
        with:
          submodules: recursive

      - name: Apply Version to Cargo.toml
        run: |
          sed -i "s/^version = \".*\"/version = \"${VERSION}\"/" Cargo.toml

      - name: Build Windows in Docker
        run: |
          docker run --rm \
            -v "${{ github.workspace }}:/work" \
            -w /work \
            ghcr.io/cross-rs/x86_64-pc-windows-gnu:latest \
            bash -lc "cargo build --release --target x86_64-pc-windows-gnu"

      - name: Fix permissions on target directory (for artifact upload)
        run: sudo chown -R $USER:$USER target || true

      - name: Collect Windows artifact
        run: |
          mkdir -p ./artifacts/windows
          cp target/x86_64-pc-windows-gnu/release/EliteAssist.exe ./artifacts/windows/EliteAssist.exe

      - name: Upload Windows artifact
        uses: actions/upload-artifact@v4
        with:
          name: EliteAssist-windows
          path: ./artifacts/windows/EliteAssist.exe

  deploy:
    if: github.event_name == 'push'
    needs:
      - build-linux
      - build-windows
      - version
    runs-on: ubuntu-latest
    environment: beta
    env:
      VERSION: ${{ needs.version.outputs.version }}
    steps:
      - uses: actions/checkout@v5
        with:
          submodules: recursive

      - name: Download Linux artifact
        uses: actions/download-artifact@v5
        with:
          name: EliteAssist-linux
          path: dist/linux

      - name: Download Windows artifact
        uses: actions/download-artifact@v5
        with:
          name: EliteAssist-windows
          path: dist/windows

      - name: Deploy
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/linux/EliteAssist
            dist/windows/EliteAssist.exe
          prerelease: true
          generate_release_notes: true
          tag_name: v${{ env.VERSION }}
