name: Build

on:
  push:
    branches: [ "main" ]
    paths-ignore:
      - 'README.md'
      - 'LICENSE.md'
      - 'docs/**'
  pull_request:
    branches: [ "main" ]
    paths-ignore:
      - 'README.md'
      - 'LICENSE.md'
      - 'docs/**'

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v5
        with:
          submodules: recursive

      - name: Install dependencies (Linux)
        run: |
          sudo apt-get update
          sudo DEBIAN_FRONTEND=noninteractive apt-get install -y \
            build-essential \
            curl \
            libx11-dev \
            libxrandr-dev \
            libxi-dev \
            libxcb1-dev \
            libgl1-mesa-dev \
            libwayland-dev \
            libudev-dev \
            pkg-config \
            git \
            cmake \
            libssl-dev

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Test
        run: cargo test --verbose

  version:
    if: github.event_name == 'push'
    runs-on: ubuntu-20.04
    outputs:
      version: ${{ steps.compute.outputs.VERSION }}
    steps:
      - uses: actions/checkout@v5
        with:
          submodules: recursive
      - name: Compute Version
        id: compute
        run: |
          VERSION=$(grep '^version = ' Cargo.toml | cut -d '"' -f2)
          MAJOR=$(echo $VERSION | cut -d. -f1)
          MINOR=$(echo $VERSION | cut -d. -f2)
          NEW_VERSION="$MAJOR.$MINOR.${{ github.run_number }}"
          echo "VERSION=$NEW_VERSION" >> $GITHUB_OUTPUT

  build-linux:
    if: github.event_name == 'push'
    needs:
      - test
      - version
    runs-on: ubuntu-20.04
    env:
      VERSION: ${{ needs.version.outputs.version }}
    steps:
      - uses: actions/checkout@v5
        with:
          submodules: recursive

      - name: Apply Version to Cargo.toml
        run: |
          sed -i "s/^version = \".*\"/version = \"${VERSION}\"/" Cargo.toml

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo DEBIAN_FRONTEND=noninteractive apt-get install -y \
            build-essential \
            curl \
            libx11-dev \
            libxrandr-dev \
            libxi-dev \
            libxcb1-dev \
            libgl1-mesa-dev \
            libwayland-dev \
            libudev-dev \
            pkg-config \
            git \
            cmake \
            libssl-dev

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Build
        run: cargo build --release

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: EliteAssist-linux
          path: target/release/EliteAssist

  build-windows:
    if: github.event_name == 'push'
    needs:
      - test
      - version
    runs-on: ubuntu-20.04
    env:
      VERSION: ${{ needs.version.outputs.version }}
    steps:
      - uses: actions/checkout@v5
        with:
          submodules: recursive

      - name: Apply Version to Cargo.toml
        run: |
          sed -i "s/^version = \".*\"/version = \"${VERSION}\"/" Cargo.toml

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo DEBIAN_FRONTEND=noninteractive apt-get install -y \
            build-essential \
            curl \
            ca-certificates \
            pkg-config \
            git \
            cmake \
            libssl-dev \
            mingw-w64 \
            gcc-mingw-w64 \
            g++-mingw-w64

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Add Windows target
        run: rustup target add x86_64-pc-windows-gnu

      - name: Build
        env:
          CARGO_TARGET_X86_64_PC_WINDOWS_GNU_LINKER: x86_64-w64-mingw32-gcc
          CC_x86_64_pc_windows_gnu: x86_64-w64-mingw32-gcc
          CXX_x86_64_pc_windows_gnu: x86_64-w64-mingw32-g++
        run: cargo build --release --target x86_64-pc-windows-gnu

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: EliteAssist-windows
          path: target/x86_64-pc-windows-gnu/release/EliteAssist.exe

  publish-github:
    if: github.event_name == 'push'
    needs:
      - build-linux
      - build-windows
      - version
    runs-on: ubuntu-20.04
    environment: beta
    env:
      VERSION: ${{ needs.version.outputs.version }}
    steps:
      - uses: actions/checkout@v5
        with:
          submodules: recursive

      - name: Download Linux artifact
        uses: actions/download-artifact@v5
        with:
          name: EliteAssist-linux
          path: dist/linux

      - name: Download Windows artifact
        uses: actions/download-artifact@v5
        with:
          name: EliteAssist-windows
          path: dist/windows

      - name: Deploy
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/linux/EliteAssist
            dist/windows/EliteAssist.exe
          prerelease: true
          generate_release_notes: true
          tag_name: v${{ env.VERSION }}


  publish-crates-io:
    if: github.event_name == 'push'
    needs:
      - build-linux
      - build-windows
      - version
    runs-on: ubuntu-20.04
    env:
      VERSION: ${{ needs.version.outputs.version }}
    steps:
      - uses: actions/checkout@v5
        with:
          submodules: recursive

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Apply Version to Cargo.toml
        run: |
          sed -i "s/^version = \".*\"/version = \"${VERSION}\"/" Cargo.toml

      - name: Publish to crates.io
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: cargo publish --allow-dirty